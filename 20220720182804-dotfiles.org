:PROPERTIES:
:ID:       1ccb1063-6bec-468f-9025-43564f0b932a
:END:
#+title: dotfile
*~J~r~m~u~n~g~a~n~d~R*
* Emacs
** doom emacs
*** init el
#+begin_src elisp :tangle ~/.config/doom/init.el :comments link
  (doom! :input
         :completion
         company           ; the ultimate code completion backend
         vertico           ; the search engine of the future
         :ui
         doom              ; what makes DOOM look the way it does
         doom-dashboard    ; a nifty splash screen for Emacs
         zen
         ;; (emoji +unicode)  ; 🙂
         hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         modeline          ; snazzy, Atom-inspired modeline, plus API
         ophints           ; highlight the region an operation acts on
         (popup +defaults)   ; tame sudden yet inevitable temporary windows
         (vc-gutter +pretty) ; vcs diff in the fringe
         vi-tilde-fringe   ; fringe tildes to mark beyond EOB
         workspaces        ; tab emulation, persistence & separate workspaces
         (treemacs
          +treemacs-git-mode)
         :editor
         (evil +everywhere); come to the dark side, we have cookies
         file-templates    ; auto-snippets for empty files
         fold              ; (nigh) universal code folding
         snippets          ; my elves. They type so I don't have to
         :emacs
         (dired +icons)    ; making dired pretty [functional]
         undo              ; persistent, smarter undo for your inevitable mistakes
         vc                ; version-control and Emacs, sitting in a tree
         :term
         vterm             ; the best terminal emulation in Emacs
         :checkers
         syntax              ; tasing you for every semicolon you forget
         :tools
         (eval +overlay)     ; run code, run (also, repls)
         lookup              ; navigate your code and its documentation
         magit             ; a git porcelain for Emacs
         :os
         :lang
         emacs-lisp        ; drown in parentheses
         markdown          ; writing docs for people to ignore
         org               ; organize your plain life in plain text
         sh                ; she sells {ba,z,fi}sh shells on the C xor
         ;; (javascript +lsp)
         ;; (haskell +lsp)
         :email
         ;; (mu4e +org +gmail)               ;
         :app
         :config
         (default +bindings +smartparens))
;; (map! :leader
;;       :desc "Org roam find node"
;;       "`" #'org-roam-node-find)
#+end_src
*** Config el
***** UI
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
(setq display-line-numbers-type 'relative)
(setq doom-theme 'doom-tokyo-night)
 ;; (setq doom-theme 'doom-dracula
 ;;     doom-themes-enable-bold t
 ;;     doom-font (font-spec :family "Inconsolata" :size 15 )
 ;;     doom-themes-enable-italic t)
#+end_src
***** Treemacs ui
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
;; (setq treemacs-indentation 0)
;; (setq treemacs-width 25)
#+end_src
***** Org mode/roam
******* Org roam config
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
(setq org-roam-directory "~/baum")
#+end_src
******* Org mode config
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
(setq user-full-name "Icaro"
      user-mail-address "icaro.onofre.s@gmail.c")

(setq org-hide-emphasis-markers t)
(setq org-agenda-files "~/baum/20220912112741-agenda.org")
#+end_src
******* Org mode UI tweaks
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link

;; (setq org-superstar-headline-bullets-list '("🌸" "🌼" "🌺"))

;; (add-hook 'org-mode-hook  (lambda () (org-superstar-mode -1)))

;; (add-hook 'org-mode-hook (lambda () (org-indent-mode -1)))

;; (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

***** Org agenda
#+begin_src elisp :tanble ~/.config/doom/config.el
(setq org-agenda-files (list "~/baum"))
#+end_src
***** mu4e
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
;; (setq mu4e-maildir "~/.mail/gmail" )
;; (setq mu4e-get-mail-command "mbsync -a" )
;;(add-hook 'dired-mode-hook (lambda () (org-roam-mode -1)))

;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; (add-hook 'dired-mode-hook 'org-roam-mode -1)
#+end_src
***** Dired
******* Ui
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
;(add-hook 'dired-mode-hook (lambda () (org-roam-mode -1)))

;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;(add-hook 'dired-mode-hook 'org-roam-mode -1)

;(setq 'dired-listing-switches "-l")
#+end_src
******* Org roam hook
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
(add-hook 'org-mode-hook  'org-indent-mode 0 )
(add-hook 'org-mode-hook 'org-modern-mode 1)
#+end_src
***** Programming
******* Dap mode
******** Python
Python debugger config
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
;; (require 'dap-python)
;; (dap-register-debug-template "Python"
;;   (list :type "python"
;;         :args "-i"
;;         :cwd nil
;;         :env '(("DEBUG" . "1"))
;;         :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
;;         :request "launch"
;;         :name "My App"))

#+end_src
***** Keybindings
******* Toggle modeline
#+begin_src elisp
;(define-key global-map (kbd "SPC t m") #'global-hide-mode-line-mode)
#+end_src
******* Transclusion keymap
#+begin_src elisp :tangle ~/.config/doom/init.el :comments link
(define-key global-map (kbd "<f12>") #'org-transclusion-add)
;(define-key global-map (kbd "C-n t") #'org-transclusion-mode)
#+end_src
******* Org roam
#+begin_src elisp :tangle ~/.config/doom/init.el :comments link
;; Find nodes in org roam db
(define-key global-map (kbd "<f1>") #'org-roam-node-find)
;; Sync added nodes or existing ones
(define-key global-map (kbd "<f2>") #'org-roam-db-sync)
;; Go to dailly
(define-key global-map (kbd "<f3>") #'org-roam-dailies-goto-date)
;; Go to today dailly
(define-key global-map (kbd "<f4>") #'org-roam-dailies-goto-today)
#+end_src
*** Packages el
#+begin_src elisp :tangle ~/.config/doom/packages.el :comments link
    (package! rainbow-mode)
    (package! vterm)
    (package! org-transclusion)
    (package! org-tanglesync)
    (package! pdf-tools)
    (package! org-bullets)
    (package! org-roam)
    ;; Programming modes
    ;; (package! rjsx-mode)
    ;;(package! prettier-js)
    (package! org-modern)
    ;; (package! lua-mode)
    ;;(package! emmet-mode)
    ;;(package! dap-mode)

    ;; (package! all-the-icons-dired)
    ;; (package! org-mode)
#+end_src
**** use package packages
#+begin_src elisp :tangle ~/.config/doom/config.el :comments link
;;(use-package org-starless
  ;;:quelpa (org-starless :repo "TonCherAmi/org-starless" :fetcher github))
#+end_src

** Classic emacs
#+begin_src elisp
  ;Define straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  					;(set-frame-font "-CYRE-Inconsolata Nerd Font-bold-normal-normal-*-*-*-*-*-*-0-iso10646-1" nil t)
  (straight-use-package 'use-package)

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (setq make-backup-files nil) ;stop creating backup files

  ;Install doom themes
  (straight-use-package 'doom-themes)
  					;(load-theme 'doom-gruvbox t)
  (load-theme 'doom-monokai-classic t)
  					;Install doom modeline
  (straight-use-package 'doom-modeline)
  (doom-modeline-mode 1)
  					;Install icons packages
  (setq doom-modeline-major-mode-icon t)
  					;Remove emacs bars
  (menu-bar-mode '-1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)

  (scroll-bar-mode -1)
  (fringe-mode -1)
  (setq tab-bar-mode -1)
  					;Set line numbers as relative
  (setq display-line-numbers-type 'relative)
  					;Set font
  					;Enable icons fore dired
  (straight-use-package 'all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  					;(set-frame-font "-CYRE-Inconsolata Nerd Font-normal-normal-normal-*-*-*-*-*-*-0-iso10646-1V")

  (straight-use-package 'lsp-mode)
  					;Lsp ui tweaks
  (setq lsp-headerline-breadcrumb-enable nil)
  (straight-use-package 'dap-mode)
  (add-hook 'prog-mode-hook 'lsp)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (setq dap-auto-configure-features '(sessions locals controls tooltip))

  					;Add dap chrome
  (require 'dap-chrome)
  (require 'dap-node)
  (require 'dap-python)

  (straight-use-package 'nix-mode)
  (straight-use-package 'haskell-mode)
  ;; (straight-use-package 'lsp-haskell)
  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  					;(add-to-list 'completion-ignored-extensions ".hi")

  (straight-use-package 'ansible)
  (straight-use-package 'yaml-mode)
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))

  (straight-use-package 'php-mode)

  (straight-use-package 'company-mode)

  (straight-use-package 'evil)
  (straight-use-package 'evil-org-mode)
  (evil-mode 1)
  (evil-org-mode 1)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-fine-undo t)

  (add-hook 'org-mode-hook 'evil-org-mode 1)
  (add-hook 'org-mode-hook 'display-line-numbers-mode 1)
  (global-set-key [f9] 'org-capture)

  (straight-use-package 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))

  (straight-use-package 'vertico)
  (vertico-mode 1)

  (straight-use-package 'treemacs)                 ;install treemacs
  (straight-use-package 'treemacs-evil)            ;treemacs evil mode
  (straight-use-package 'treemacs-magit)           ;treemacs magit support
  (straight-use-package 'treemacs-all-the-icons)   ;treemacs icons and UI

  (setq treemacs-width '25)
  (setq treemacs-user-mode-line-format 'none)

  (global-set-key [f8] 'treemacs)

  (straight-use-package 'magit)

  (straight-use-package 'helpful)
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  (straight-use-package 'which-key)
  (which-key-mode 1)

  (straight-use-package 'solaire-mode)
  (solaire-global-mode +1)

  (straight-use-package 'writeroom-mode)

  (straight-use-package 'rainbow-delimiters)
  (setq rainbow-delimeters-mode 't)

  (straight-use-package 'rainbow-mode)

  (straight-use-package 'pdf-tools)
  (pdf-tools-install)

  (straight-use-package 'yasnippets)
  (straight-use-package 'yasnippet-snippets)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"                 ;; personal snippets
  	"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
  	"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
  	))
  (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
  ;;keybindings
  (global-set-key (kbd "C-c C-n") 'yas-new-snippet)
  (global-set-key (kbd "C-c C-i") 'yas-insert-snippet)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind(("C-x C-j" . dired-jump))
    )
  (add-hook 'diredmode-hook evil-mode -1)

  (straight-use-package 'emmet-mode)

  (straight-use-package 'recentf)

  (straight-use-package 'helm)

  (straight-use-package 'pdf-view-restore)
  (add-hook 'pdf-view-mode-hook 'pdf-view-restore)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org"."https://orgmode.org/elpa/")
  			 ("elpa"."https://melpa.org/packages/")))

#+end_src
* Polybar
#+begin_src ini :tangle ~/.config/polybar/config.ini
; ~J~o~r~m~u~n~g~a~n~d~r~
[colors]
background = #FFFFFF
fackground-alt = #373B41
foreground = #000
primary = #8ABEB7

secondary = #A54242
dlert = #F0C674
sisabled = #707880
[bar/lain]
width = 100%
height = 20pt
radius = 0

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 3pt

padding-left = 0
padding-right = 1

; module-margin = 1

separator = |
;separator-foreground = ${colors.disabled}

font-0 = inconsolata;2

modules-left = xworkspaces xwindow
modules-right = filesystem pulseaudio xkeyboard memory cpu wlan eth date


enable-ipc = true

; tray-position = right

; wm-restack = generic
; wm-restack = bspwm
; wm-restack = i3

; override-redirect = true

[module/xworkspaces]
type = internal/xworkspaces

label-active = %name%
label-active-background = ${colors.background-alt}
label-active-underline= ${colors.primary}
label-active-padding = 1

label-occupied = %name%
label-occupied-padding = 1

label-urgent = %name%
label-urgent-background = ${colors.alert}
label-urgent-padding = 1

label-empty = %name%
label-empty-foreground = ${colors.disabled}
label-empty-padding = 1

[module/xwindow]
type = internal/xwindow
label = %title:0:60:...%

[module/filesystem]
type = internal/fs
interval = 25

mount-0 = /

label-mounted = %{F#F0C674}%mountpoint%%{F-} %percentage_used%%

label-unmounted = %mountpoint% not mounted
label-unmounted-foreground = ${colors.disabled}

[module/pulseaudio]
type = internal/pulseaudio

format-volume-prefix = "VOL "
format-volume-prefix-foreground = ${colors.primary}
format-volume = <label-volume>

label-volume = %percentage%%

label-muted = muted
label-muted-foreground = ${colors.disabled}

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

label-layout = %layout%
label-layout-foreground = ${colors.primary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-foreground = ${colors.background}
label-indicator-background = ${colors.secondary}

[module/memory]
type = internal/memory
interval = 2
format-prefix = "RAM "
format-prefix-foreground = ${colors.primary}
label = %percentage_used:2%%

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = "CPU "
format-prefix-foreground = ${colors.primary}
label = %percentage:2%%

; [network-base]
; type = internal/network
; interval = 5
; format-connected = <label-connected>
; format-disconnected = <label-disconnected>
; label-disconnected = %{F#F0C674}%ifname%%{F#707880} disconnected

; [module/wlan]
; inherit = network-base
; interface-type = wireless
; label-connected = %{F#F0C674}%ifname%%{F-} %essid% %local_ip%

; [module/eth]
; inherit = network-base
; interface-type = wired
; label-connected = %{F#F0C674}%ifname%%{F-} %local_ip%

[module/date]
type = internal/date
interval = 1

date = %H:%M
date-alt = %Y-%m-%d %H:%M:%S

label = %date%
label-foreground = ${colors.primary}

[settings]
screenchange-reload = true
pseudo-transparency = true

; vim:ft=dosini
#+end_src
* Vim/neovim
** Classic vim
#+begin_src vimscript :tangle ~/.config/nvim/init.vim
" ~J~o~r~m~u~n~g~a~n~d~r~
"leader key
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath
let mapleader ="\<Tab>"
set wrap
colorscheme xoix
set hlsearch
set incsearch
set encoding=utf-8
set relativenumber
set number
set clipboard+=unnamedplus
set noerrorbells
set noswapfile
set rnu
set nowrap
set smartindent
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set ft=xxd
set termguicolors
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn','\%81v',100)
" Default preferences
nnoremap n nzzzv
nnoremap N Nzzzv
" nnoremap <C-j> :cnext<CR>zzzv
nnoremap J mzJ`z
inoremap , ,<C-g>u

call plug#begin('~/.vim/plugged')
    Plug 'itchyny/lightline.vim'                "Vim Statusline
    Plug 'lilydjwg/colorizer'               "vim color highlighing
    Plug 'vimwiki/vimwiki'                  "Vim notetaking plugin
    " Plug 'puremourning/vimspector'          "Vim debugger
    Plug 'tpope/vim-surround'               "vim Surround text with other textj
    Plug 'junegunn/fzf.vim'                 "Vim fuzzy finder
    Plug 'iamcco/markdown-preview.vim'      "Mardown preview
    Plug 'tpope/vim-fugitive'               "Vim git plugin
    Plug 'kkoomen/vim-doge'                 "Vim Doge
    Plug 'honza/vim-snippets'               "Vim coc snippets
    Plug 'prabirshrestha/vim-lsp'           "Vim lsp
    Plug 'scrooloose/nerdtree'              "Tree view of files
    Plug 'tpope/vim-commentary'             "Vim automatic commentary
    Plug 'VundleVim/Vundle.vim'             "Vim plugin manager
    Plug 'neoclide/coc.nvim',{'branch':'release'}
    Plug 'ackyshake/VimCompletesMe'
    Plug 'ackyshake/VimCompletesMe'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'ryanoasis/vim-devicons'
    Plug 'junegunn/vim-peekaboo'
    Plug 'mhinz/vim-signify'
    "Plug svermeulen/vim-macrobatics
    " Syntax highlighter
    Plug 'uiiaoo/java-syntax.vim'
    Plug 'mxw/vim-jsx'
    Plug 'frazrepo/vim-rainbow'
call plug#end()
call vundle#begin()
    Plugin 'iamcco/markdown-preview.vim'
call vundle#end()
" COC CONFIG
"
" To make completion works like VSCode
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" TextEdit might fail if hidden is not set.
set hidden
"
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
"
" Give more space for displaying messages.
set cmdheight=2
"
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
"
" End of Coc plugin config
"
"Vim keybings
noremap <leader>h :%!xxd <CR><CR>
noremap <leader>H :%!xxd -r <CR><CR>
noremap <leader>bh :%!xxd -b <CR><CR>
noremap <leader>ph :%!xxd -p <CR><CR>
noremap <leader><Tab> :tabedit <CR><CR>
noremap <leader>vr :reg <CR>
noremap <leader>vm :marks <CR>
noremap <leader>C :colorscheme
noremap <leader>d :diffthis <CR>
noremap <C-p>     :Files <CR>
noremap <leader>vv :vert term<CR>
noremap <leader>vh :term<CR>
noremap <leader>e :Explore<CR>
noremap <leader>q :only <CR>
noremap <leader>t :tabonly <CR>
"Plug Keybings
noremap <leader>P :PlugInstall <CR>
noremap <leader>Pc :PlugClean <CR>
"Plugin Keybings
noremap <leader>Pl :PluginInstall <CR>
noremap <leader>Plc :PluginClean <CR>
" C/C++ keybings
" noremap <leader>gcc :!gcc % -o
" noremap <leader>gcc :!gcc % -o %:r <CR>
" Python keybings
nnoremap <leader>p : !python % <CR>
"Fugitive keybings
nnoremap <leader>gc : Git commit -m "
nnoremap <leader>ga : Git add .
nnoremap <leader>gs : Git status     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<CR>
nnoremap <leader>gra : Git remote add
nnoremap <leader>gb : Git branch <CR>
" nnoremap <leader>gc : Git checkout
nnoremap <leader>gp : Git push
"Latex/PDF keybings
map <leader>\ :! pdflatex %<CR><CR>
noremap <expr> <silent> <leader>z system("zathura " . substitute(expand("%"), '.tex$', '.pdf', ""). " &")
noremap <expr> <silent> <leader>lz system("zathura "."&")
"Nerd tree keybings
" nnoremap <leader>n :NERDTreeFocus<CR>
" nnoremap <C-n> :NERDTree<CR>
let NERDTreeQuitOnOpen=1
" nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
" Coc keybindings
nnoremap <leader>ci :CocInstall
nnoremap <leader>cc :CocConfig <CR>
nnoremap <leader>cl :CocList <CR>
" Coc snippets
nnoremap <leader>cse :CocCommand snippets.editSnippets<CR>
nnoremap <leader>csl :CocList snippets<CR>
nnoremap <leader>csd :CocCommand snippets.openSnippetFiles<CR>
" Maximizer
nnoremap <C-m> :MaximizerToggle <CR>
"Vimspector configl
let g:vimspector_enable_mappings = 'HUMAN'
" Install missings puglins

autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

#+end_src
* Mbsync
Config file for my email feed reader, it should be placed  under the home dir with hidden file attribute.
#+begin_src bash :tanble ~/.mbsyncrc
IMAPAccount gmail
Host imap.gmail.com
User icaro.onofre.s@gmail.com
Pass agbyktbxhjrniqwi
TLSType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MailDirStore gmail-local
Subfolders Verbatim
Path ~/.mail/gmail/
Inbox ~/.mail/gmail/inbox/

Channel gmail
Far :gmail-remote:
Near :gmail-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail/Starred]" "[Gmail/All]"
SyncState *
#+end_src
