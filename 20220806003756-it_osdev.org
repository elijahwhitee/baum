:PROPERTIES:
:ID:       6d0a3c6c-2d71-4483-ac9b-d5c9e82d39a4
:END:
#+title: it/osdev
* Emulation with qemu

*qemu-system-x86_64* -kernel /file name/

* Running Hello world in bare metal
** Hello world example 1
#+begin_src asm
; Multiboot v1 - Compliant Header for QEMU
; We use multiboot v1 since Qemu "-kernel" doesn't support
; multiboot v2

; This part MUST be 4-byte aligned, so we solve that issue using 'ALIGN 4'
ALIGN 4
section .multiboot_header
    ; Multiboot macros to make a few lines later more readable
    MULTIBOOT_PAGE_ALIGN	equ 1<<0
    MULTIBOOT_MEMORY_INFO	equ 1<<1
    MULTIBOOT_HEADER_MAGIC	equ 0x1BADB002                                   ; magic number
    MULTIBOOT_HEADER_FLAGS	equ MULTIBOOT_PAGE_ALIGN | MULTIBOOT_MEMORY_INFO ; flags
    MULTIBOOT_CHECKSUM	equ - (MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)  ; checksum
                                ; (magic number + checksum + flags should equal 0)

    ; This is the GRUB Multiboot header. A boot signature
    dd MULTIBOOT_HEADER_MAGIC
    dd MULTIBOOT_HEADER_FLAGS
    dd MULTIBOOT_CHECKSUM

#+end_src
#+begin_src asm
global start

section .text
bits 32    ; By default, GRUB loads the kernel in 32-bit mode
start:

    ; Print `Hello world!` on the screen by placing ASCII
    ; characters in the VGA screen buffer that starts at 0xb8000
    mov word [0xb8000], 0x0248 ; H
    mov word [0xb8002], 0x0265 ; e
    mov word [0xb8004], 0x026c ; l
    mov word [0xb8006], 0x026c ; l
    mov word [0xb8008], 0x026f ; o
    mov word [0xb800a], 0x0220 ;
    mov word [0xb800c], 0x0277 ; w
    mov word [0xb800e], 0x026f ; o
    mov word [0xb8010], 0x0272 ; r
    mov word [0xb8012], 0x026c ; l
    mov word [0xb8014], 0x0264 ; d
    mov word [0xb8016], 0x0221 ; !

    hlt ; Halt CPU

#+end_src
#+begin_src linker
ENTRY(start)

SECTIONS {
    . = 0x100000; /* Tells GRUB to load the kernel starting at the 1MB */

    .boot :
    {
        /* Ensure that the multiboot header is at the beginning */
        *(.multiboot_header)
    }

    .text :
    {
        *(.text)
    }

}

#+end_src

** Hello world example 2
[[https://wiki.osdev.org/Bare_Bones_with_NASM][Bare Bones with NASM]]
* Embeeded linux
** Build root
[[https://buildroot.org/][BuildRoot]]
[[https://www.yoctoproject.org/][YoctoProject]]
